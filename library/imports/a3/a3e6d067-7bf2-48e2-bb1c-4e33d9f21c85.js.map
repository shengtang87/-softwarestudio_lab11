{"version":3,"sources":["assets/Scripts/Platform.ts"],"names":[],"mappings":";;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAsC,4BAAY;IAAlD;QAAA,qEAgFC;QA9Ea,eAAS,GAAY,KAAK,CAAC;QAE7B,UAAI,GAAiB,IAAI,CAAC;QAE1B,eAAS,GAAW,EAAE,CAAC;QAEvB,YAAM,GAAY,IAAI,CAAC;;QAqDjC,mDAAmD;QACnD,wDAAwD;QACxD,mEAAmE;QACnE,yDAAyD;QACzD,EAAE;QACF,6FAA6F;QAC7F,EAAE;QACF,uEAAuE;QACvE,yFAAyF;QACzF,sFAAsF;QACtF,EAAE;QACF,gFAAgF;QAChF,oCAAoC;QACpC,EAAE;QACF,mHAAmH;QACnH,EAAE;QACF,0FAA0F;QAC1F,EAAE;QACF,mDAAmD;IACrD,CAAC;IAtEG,wBAAK,GAAL;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QAE5C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAE5C,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,EAAE;YAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;SACtC;aACI,IAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,EAClC;YACI,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;YACnD,IAAG,OAAO,EACV;gBACI,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBAChD,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAClC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;aACzC;SACJ;IACL,CAAC;IAED,yBAAM,GAAN,UAAO,EAAE;QAEL,IAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,EAAE,yBAAyB;YAC5D,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,CAAC;IAED,2BAAQ,GAAR;QACI,IAAG,IAAI,CAAC,IAAI;YACR,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;IAED,kCAAe,GAAf;QAEI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,+BAAY,GAAZ,UAAa,OAAe,EAAE,SAAiB;QAE3C,IAAI,QAAQ,GAAW,CAAC,CAAC;QACzB,mDAAmD;QACnD,yFAAyF;QACzF,+CAA+C;QAC/C,sDAAsD;QACtD,kHAAkH;QAClH,6GAA6G;QAC7G,qFAAqF;QACrF,0DAA0D;QAC1D,mDAAmD;IACvD,CAAC;IA3DgB,QAAQ;QAD5B,OAAO;OACa,QAAQ,CAgF5B;IAAD,eAAC;CAhFD,AAgFC,CAhFqC,EAAE,CAAC,SAAS,GAgFjD;kBAhFoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Platform extends cc.Component {\r\n\r\n    protected isTouched: boolean = false;\r\n\r\n    private anim: cc.Animation = null;\r\n\r\n    private moveSpeed: number = 50;\r\n\r\n    private camera: cc.Node = null;\r\n\r\n    start() {\r\n        this.anim = this.getComponent(cc.Animation);\r\n\r\n        this.camera = cc.find('Canvas/Main Camera');\r\n\r\n        if (this.node.name == \"Conveyor\") {\r\n            this.node.scaleX = (Math.random() >= 0.5) ? 1 : -1;\r\n            this.moveSpeed *= this.node.scaleX;\r\n        }\r\n        else if(this.node.name == \"Normal\")\r\n        {\r\n            let canMove = (Math.random() > 0.8) ? true : false;\r\n            if(canMove)\r\n            {\r\n                let moveDir = (Math.random() > 0.5) ? \"v\" : \"h\";\r\n                let delayTime = Math.random() * 2;\r\n                this.platformMove(moveDir, delayTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    update(dt)\r\n    {   \r\n        if(this.camera.y - this.node.y >= 190) // platform out of screen\r\n            this.platformDestroy();\r\n    }\r\n\r\n    playAnim() {\r\n        if(this.anim)\r\n            this.anim.play();\r\n    }\r\n\r\n    platformDestroy()\r\n    {\r\n        this.node.destroy();\r\n    }\r\n\r\n    platformMove(moveDir: string, delayTime: number)\r\n    {\r\n        let easeRate: number = 2;\r\n        // ===================== TODO =====================\r\n        // 1. Make platform move back and forth. You should use moveDir to decide move direction.\r\n        //    'v' for vertical, and 'h' for horizontal.\r\n        // 2. Use action system to make platfrom move forever.\r\n        //    For horizontal case, you should first move right 50 pixel in 2s and then move back to initial position in 2s\r\n        //    For vertical case, you should first move up 50 pixel in 2s and then move back to initial position in 2s\r\n        //    You need to use \"easeInOut\" to modify your action with \"easeRate\" as parameter.\r\n        // 3. Use scheduleOnce with delayTime to run this action. \r\n        // ================================================\r\n    }\r\n\r\n  // ===================== TODO =====================\r\n  // 1. In the physics lecture, we know that Cocos Creator\r\n  //    provides four contact callbacks. You need to use callbacks to\r\n  //    design different behaviors for different platforms.\r\n  //\r\n  //    Hints: The callbacks are \"onBeginContact\", \"onEndContact\", \"onPreSolve\", \"onPostSolve\".\r\n  //\r\n  // 2. There are two different types of platforms: \"Normal\" & Conveyor\".\r\n  //    For \"Conveyor\", you have to do \"delivery effect\" when player is in contact with it.\r\n  //    Note that the platforms have \"delivery effect\" only when player stands on them. \r\n  //\r\n  //    Hints: Change \"linearVelocity\" of the player's rigidbody to make him move.\r\n  //    The move value is \"moveSpeed\".\r\n  //\r\n  // 3. All the platforms have only \"upside\" collision. You have to prevent the collisions from the other directions.\r\n  //\r\n  //    Hints: You can use \"contact.getWorldManifold().normal\" to judge collision direction.\r\n  //\r\n  // ================================================\r\n}\r\n"]}